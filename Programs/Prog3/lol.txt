#include <functional>
#include <vector>
#include <iostream>
#include <string>
#include <map>
#include <algorithm>

using namespace std;

// typedef pair<string, int> minimap;
// struct cmp
//     {
//         bool operator()(const minimap &a, const minimap &b) { return (a.first < b.first);}
//     };

void getInput(map<string, int> &inputMap)
{
    string input;
    char delimiter = ' ';
    while (getline(cin, input))
    {
        if(input.empty())
        {
            break;
        }
        inputMap[input.substr(0, input.find(delimiter))] = stoi(input.substr(input.find(delimiter) + 1, input.size() - 1));
    }
}

void createMatrix(map<string, int> &inputMap, vector<int> &sums, vector<vector<int>> &matrix)
{
    int count = 0;
    int previous;
    for (auto const& i : inputMap)
    {
        vector<int> column(inputMap.size());
        sums.push_back(!sums.empty() ? sums[previous] + i.second : i.second);
        previous = count;
        column[count] = i.second;
        matrix.push_back(column);
        count++;
    }
}

void findSmallestRoot(vector<int> &sums, vector<vector<int>> &matrix)
{
    int startingPoint = 1;
    for(int i = 0; i < matrix.size(); i++, startingPoint++)
    {
        for(int x = startingPoint, y = 0; x < matrix.size(); x++, y++)
        {
            if (startingPoint == 1)
            {
                // matrix[x][y] = ((matrix[y][y] < matrix[x][x]) ? matrix[x][x] : matrix[y][y]) + sums[x] - ((y==0) ? 0 : sums[(x-2)]);
            }
            else
            {
                matrix[x][y] = ((matrix[x][x] + matrix[x-2][y] <= matrix[y][y] + matrix[x][y+2]) 
                ? 
                matrix[x][x] + matrix[x-2][y] 
                :
                matrix[y][y] + matrix[x][y+2]) + sums[x] - sums[((y==0) ? 0 : x-y-1)];
            }
        }
    }
    for(vector<int> i : matrix)
    {
        for(int j : i)
        {
            cout << j << " ";
        }
        cout << endl;
    }
}

int main() 
{
    map<string, int> inputMap;
    vector<int> sums;
    vector<vector<int>> matrix;
    getInput(inputMap);
    createMatrix(inputMap, sums, matrix);
    findSmallestRoot(sums, matrix);
    cout << matrix[4][0] << endl;
    return 0;
}

//g++ -std=c++14 *.cpp